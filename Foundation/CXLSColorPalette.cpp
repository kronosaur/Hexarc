//	CXLSColorPalette.cpp
//
//	CXLSColorPalette class
//	Copyright (c) 2021 Kronosaur Productions, LLC. All Rights Reserved.

#include "stdafx.h"

std::initializer_list<CRGBA32> CXLSColorPalette::m_Defaults = {
	CRGBA32(0x00, 0x00, 0x00),		//	Built-in Black
	CRGBA32(0xFF, 0xFF, 0xFF),		//	Built-in White
	CRGBA32(0xFF, 0x00, 0x00),		//	Built-in Red
	CRGBA32(0x00, 0xFF, 0x00),		//	Built-in Green
	CRGBA32(0x00, 0x00, 0xFF),		//	Built-in Blue
	CRGBA32(0xFF, 0xFF, 0x00),		//	Built-in Yellow
	CRGBA32(0xFF, 0x00, 0xFF),		//	Built-in Magenta
	CRGBA32(0x00, 0xFF, 0xFF),		//	Built-in Cyan

	CRGBA32(0x80, 0x00, 0x00),
	CRGBA32(0x00, 0x80, 0x00),
	CRGBA32(0x00, 0x00, 0x80),
	CRGBA32(0x80, 0x80, 0x00),
	CRGBA32(0x80, 0x00, 0x80),
	CRGBA32(0x00, 0x80, 0x80),
	CRGBA32(0xC0, 0xC0, 0xC0),
	CRGBA32(0x80, 0x80, 0x80),

	CRGBA32(0x99, 0x99, 0xFF),
	CRGBA32(0x99, 0x33, 0x66),
	CRGBA32(0xFF, 0xFF, 0xCC),
	CRGBA32(0xCC, 0xFF, 0xFF),
	CRGBA32(0x66, 0x00, 0x66),
	CRGBA32(0xFF, 0x80, 0x80),
	CRGBA32(0x00, 0x66, 0xCC),
	CRGBA32(0xCC, 0xCC, 0xFF),

	CRGBA32(0x00, 0x00, 0x80),
	CRGBA32(0xFF, 0x00, 0xFF),
	CRGBA32(0xFF, 0xFF, 0x00),
	CRGBA32(0x00, 0xFF, 0xFF),
	CRGBA32(0x80, 0x80, 0x00),
	CRGBA32(0x80, 0x00, 0x00),
	CRGBA32(0x00, 0x80, 0x80),
	CRGBA32(0x00, 0x00, 0xFF),

	CRGBA32(0x00, 0xCC, 0xFF),
	CRGBA32(0xCC, 0xFF, 0xFF),
	CRGBA32(0xCC, 0xFF, 0xCC),
	CRGBA32(0xFF, 0xFF, 0x99),
	CRGBA32(0x99, 0xCC, 0xFF),
	CRGBA32(0xFF, 0x99, 0xCC),
	CRGBA32(0xCC, 0x99, 0xFF),
	CRGBA32(0xE3, 0xE3, 0xE3),

	CRGBA32(0x33, 0x66, 0xFF),
	CRGBA32(0x33, 0xCC, 0xCC),
	CRGBA32(0x99, 0xCC, 0x00),
	CRGBA32(0xFF, 0xCC, 0x00),
	CRGBA32(0xFF, 0x99, 0x00),
	CRGBA32(0xFF, 0x66, 0x00),
	CRGBA32(0x66, 0x66, 0x99),
	CRGBA32(0x96, 0x96, 0x96),

	CRGBA32(0x00, 0x33, 0x66),
	CRGBA32(0x33, 0x99, 0x66),
	CRGBA32(0x00, 0x33, 0x00),
	CRGBA32(0x33, 0x33, 0x00),
	CRGBA32(0x99, 0x33, 0x00),
	CRGBA32(0x99, 0x33, 0x66),
	CRGBA32(0x33, 0x33, 0x99),
	CRGBA32(0x33, 0x33, 0x33),
};

CXLSColorPalette::CXLSColorPalette ()

//	CXLSColorPalette constructor

	{
	m_Colors.GrowToFit((int)m_Defaults.size());
	for (const auto &Entry : m_Defaults)
		{
		m_Colors.Insert(Entry);
		}
	}

int CXLSColorPalette::FindColor (const CRGBA32 &Color) const

//	FindColor
//
//	Finds the index of the nearest color.

	{
	int iBestIndex = -1;
	int iBestDist = 0;

	for (int i = 0; i < m_Colors.GetCount(); i++)
		{
		int iDist = Abs((int)m_Colors[i].GetRed() - (int)Color.GetRed()) 
				+ Abs((int)m_Colors[i].GetGreen() - (int)Color.GetGreen())
				+ Abs((int)m_Colors[i].GetBlue() - (int)Color.GetBlue());

		if (iBestIndex == -1 || iDist < iBestDist)
			{
			iBestIndex = i;
			iBestDist = iDist;
			}
		}

	return iBestIndex;
	}
